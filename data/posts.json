[
  {
    "title": "Implementing Light/Dark Mode in JavaScript",
    "date": "2025-08-04",
    "author": "Taha Hashmi",
    "content": "Adding a light/dark mode switcher to my portfolio website was both fun and a great learning experience. I started by adding a simple button to all my HTML pages, allowing users to toggle between themes. I used JavaScript to add or remove a `dark-mode` class on the body element. In my CSS file, I defined how the background, text, header, footer, and even buttons should look when dark mode is active. \n\nOne of the important features I added was saving the user's theme preference using `localStorage`. This way, when a user revisits the site, it automatically loads in their preferred theme without needing to switch it again. At first, I had issues where text disappeared in dark mode. This happened because certain sections and headings had hardcoded light or dark colors that didn't adapt. I fixed this by overriding those styles within the dark mode CSS block. \n\nI also ensured accessibility and contrast by making links and buttons stand out clearly in both themes. Additionally, I used JavaScript to change the toggle button's label based on the current mode, making the user experience smoother. Overall, this was a practical example of combining HTML, CSS, and JavaScript to improve the interactivity of a real-world web project. It helped me better understand DOM manipulation, event listeners, and state management through `localStorage`. I’m happy with the result and plan to expand this by offering more themes or a system preference detection feature in the future."
  },
  {
    "title": "Loading Blog Posts Dynamically from JSON",    
    "date": "2025-08-04",
    "author": "Taha Hashmi",
    "content": "To make my blog more flexible and easier to update, I decided to load blog posts dynamically from a JSON file using JavaScript. This allows me to keep my HTML clean and avoid hardcoding every blog entry into the page. Instead, I created a `posts.json` file that stores an array of blog post objects, each with a title, date, and content. \n\nI used the `fetch()` API in JavaScript to load this file, then looped through the results using `forEach` and created a new `div` element for each post. I appended these elements to a container with the ID `blog-list`, so the content would display inside the main blog section of my HTML. I styled the output to match my existing blog card design using CSS, ensuring the new posts looked just like the older hardcoded ones. \n\nOne of the benefits of this approach is scalability. If I want to add a new post, I just add another object to the JSON file without touching the HTML or JavaScript. It also improves maintainability and separates content from layout, which is a good practice in web development. \n\nI initially ran into issues where `fetch()` didn’t work because I was opening the HTML file directly from my file system. I solved this by running a local web server using the Live Server extension in VS Code. Overall, this was a helpful step toward making my website more dynamic, and I plan to explore using external APIs or a CMS in future projects."
  }
]

